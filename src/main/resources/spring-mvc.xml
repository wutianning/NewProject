<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd  
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">  
    <!--根据Spring的注解查找Controller -->
    <mvc:annotation-driven />
    
    <!--对web包中的所有类进行扫描   -->
    <context:component-scan base-package="com.zkr.*.controller" />
    
   	<!--  静态文件访问,主要是让DispatcherServlet不拦截以下静态资源 -->
    <mvc:resources location="/image/" mapping="/image/**"/> 
	<mvc:resources location="/css/" mapping="/css/**"/> 
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/easyui/" mapping="/easyui/**"/>
	<mvc:resources location="/kindeditor/" mapping="/kindeditor/**"/>
	<mvc:resources location="/attached/" mapping="/attached/**"/>
	<mvc:resources location="/upload/" mapping="/upload/**"/>
	<mvc:resources location="/jquery/" mapping="/jquery/**"/>
	
    <!-- 这两个类用来启动基于Spring MVC的注解功能，将控制器与方法映射加入到容器中 -->
  	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
  	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
  
    <!-- 这个类用于Spring MVC视图解析 
	    InternalResourceViewResolver：用于支持Servlet、JSP视图解析；
	    prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），
	          比如传进来的逻辑视图名为WEB-INF/jsp/hello，则该该jsp视图页面应该存放在“WEB-INF/jsp/hello.jsp”；
	    /user/show.jsp
    -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/view/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
  <!--   <mvc:annotation-driven/>
	通过注解，把一个URL映射到Controller类上 <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" /> <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />
	默认controller
	<mvc:view-controller path="/" view-name="login"/>
	freemarker的配置
	<bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings">
			<props>
				FreeMarker默认每隔5秒检查模板是否被更新，如果已经更新了，就会重新加载并分析模板。 但经常检查模板是否更新可能比较耗时。如果应用运行在生产模式下，而且你预期模板不会经常更新，
				则可以将更新的延迟时间延长至一个小时或者更久。 可以通过为freemarkerSettings属性设置template_update_delay达到这一目的
				<prop key="template_update_delay">5</prop>
				<prop key="tag_syntax">auto_detect</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="output_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="number_format">#.##</prop>
				可以满足一般需要。默认情况变量为null则替换为空字符串，如果需要自定义，写上${empty!"EmptyValue of fbysss"}的形式即可
				<prop key="classic_compatible">true</prop>
			</props>
		</property>
		<property name="freemarkerVariables">
			<map>
				<entry key="xml_escape" value-ref="fmXmlEscape" />
			</map>
		</property>
	</bean>
	FreeMarker视图解析 如返回userinfo。。在这里配置后缀名ftl和视图解析器。。
	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="suffix" value=".ftl" />
		<property name="prefix" value="/ftl/" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
	</bean>
	<mvc:default-servlet-handler /> -->
    
    
    
    <!-- 上传文件配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> <!--允许上传文件大小 -->
		<property name="maxUploadSize" value="104857600000" />
		<!--缓存大小 -->
		<property name="maxInMemorySize" value="4096" />
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
   
    <!-- 处理json乱码 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg>
					<bean class="java.nio.charset.Charset" factory-method="forName">
						<constructor-arg value="UTF-8"/>
					</bean>
				</constructor-arg>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 拦截器 -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			拦截所有请求
			<mvc:mapping path="/**" />
			放过的请求
			<mvc:exclude-mapping path="/user/**"/>
			自定义拦截器类
			<bean class="com.jk.interceptor.MyInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>  -->
	<!-- 所有异常的类 -->
	<mvc:interceptors>
        <bean class="com.zkr.spring.ExceptionHanlder"/>
    </mvc:interceptors>
</beans>